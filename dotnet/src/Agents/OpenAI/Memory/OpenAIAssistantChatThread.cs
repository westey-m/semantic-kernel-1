// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.SemanticKernel.Agents.Memory;
using Microsoft.SemanticKernel.Agents.OpenAI.Internal;
using Microsoft.SemanticKernel.ChatCompletion;
using OpenAI.Assistants;

namespace Microsoft.SemanticKernel.Agents.OpenAI;

public class OpenAIAssistantChatThread : ChatThread
{
    private bool _threadActive = false;
    private string? _threadId = null;
    private readonly AssistantClient _client;

    public OpenAIAssistantChatThread(AssistantClient client)
    {
        this._client = client;
    }

    /// <inheritdoc />
    public override bool HasActiveThread => this._threadActive;

    /// <inheritdoc />
    public override string? CurrentThreadId => this._threadId;

    /// <inheritdoc />
    public override async Task<string> StartNewThreadAsync(CancellationToken cancellationToken = default)
    {
        if (this._threadActive)
        {
            throw new InvalidOperationException("Thread already active.");
        }

        var assitantThreadResponse = await this._client.CreateThreadAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
        this._threadId = assitantThreadResponse.Value.Id;
        this._threadActive = true;

        return assitantThreadResponse.Value.Id;
    }

    /// <inheritdoc />
    public override async Task EndThreadAsync(CancellationToken cancellationToken = default)
    {
        if (!this._threadActive)
        {
            throw new InvalidOperationException("No thread active.");
        }

        await this._client.DeleteThreadAsync(this._threadId, cancellationToken).ConfigureAwait(false);
        this._threadId = null;
        this._threadActive = false;
    }

    /// <inheritdoc />
    public override async Task OnNewMessageAsync(ChatMessageContent newMessage, CancellationToken cancellationToken = default)
    {
        if (!this._threadActive)
        {
            throw new InvalidOperationException("No thread active.");
        }

        // If the message was generated by this agent, it is already in the thread and we shouldn't add it again.
        if (newMessage.Metadata == null || !newMessage.Metadata.TryGetValue("ThreadId", out var messageThreadId) || !string.Equals(messageThreadId, this._threadId))
        {
            await AssistantThreadActions.CreateMessageAsync(this._client, this._threadId!, newMessage, cancellationToken).ConfigureAwait(false);
        }
    }

    /// <inheritdoc />
    public override async Task<ChatHistory> RetrieveCurrentChatHistoryAsync(CancellationToken cancellationToken = default)
    {
        if (!this._threadActive)
        {
            throw new InvalidOperationException("No thread active.");
        }

        return new ChatHistory(await AssistantThreadActions.GetMessagesAsync(this._client, this._threadId!, cancellationToken).ToListAsync(cancellationToken).ConfigureAwait(false));
    }
}
